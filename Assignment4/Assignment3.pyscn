# -*- coding: utf-8 -*-

import Sofa
import os
import Sofa.Core #contains controller class
import Sofa.constants.Key as Key


from stlib3.scene import Scene
# A prefab that implements an ElasticMaterialObject
from stlib3.physics.deformable import ElasticMaterialObject
from stlib3.visuals import VisualModel
from stlib3.physics.rigid import Sphere
from softrobots.actuators import PullingCable


class ballController(Sofa.Core.Controller):
    def __init__(self,*args, **kwargs):
        Sofa.Core.Controller.__init__(self, args, kwargs)
        self.cable = args[0]
        self.name = 'ballController'

    def onKeypressedEvent(self, e):
        displacement = self.cable.CableConstraint.value[0]
        if e["key"] == Key.plus:
            displacement += 1

        elif e["key"] == Key.minus:
            displacement -= 1
            if displacement <0:
                displacement = 0
        self.cable.CableConstraint.value = [displacement]


def createScene(rootNode):
    rootNode.addObject("RequiredPlugin",
                       pluginName=["SoftRobots", 'SofaConstraint', 'SofaEngine', 'SofaLoader', 'SofaDeformable', 'ModelOrderReduction'])
    scene = Scene(rootNode, gravity=[0.0, -9810.0, 0.0], dt=0.01)
    scene.VisualStyle.displayFlags='showBehavior'

    rootNode.addObject("FreeMotionAnimationLoop")
    rootNode.addObject("GenericConstraintSolver", maxIterations=1000, tolerance=0.001)

    sphere=Sphere(rootNode, translation=[0.0,0.0,0.0],uniformScale=3.0, color=[0,0,1,1])
    #sphere.addObject('UncoupledConstraintCorrection')
    #sphere.addObject('GenericConstraintCorrection')

    ##########################################
    # # Cable                                  #
    # ##########################################

    # #  This adds a new node in the scene. This node is appended to the finger's node.
    # cable = sphere.addChild('cable')

    # # This adds a MechanicalObject, a component holding the degree of freedom of our
    # # mechanical modelling. In the case of a cable it is a set of positions specifying
    # # the points where the cable is passing by.
    # cable.addObject('MechanicalObject',
    #                 position=[
    #                     [20, -10, 0],
    #                     [10, -5, 0],
    #                     [-20, 10, 0]])

    # # add a CableConstraint object with a name.
    # # the indices are referring to the MechanicalObject's positions.
    # # The last index is where the pullPoint is connected.
    # cable.addObject('CableConstraint', name="cable",
    #                 indices=list(range(0, 3)),
    #                 pullPoint=[30.0, -15, 0])

    # # This adds a BarycentricMapping. A BarycentricMapping is a key element as it will add a bidirectional link
    # # between the cable's DoFs and the finger's one's so that movements of the cable's DoFs will be mapped
    # # to the finger and vice-versa;
    # cable.addObject('BarycentricMapping')

    sphere.addObject('BoxROI', name='ROI1', box=[-1, -1, -1, 1, 1, 1], drawBoxes=True)
    sphere.addObject('RestShapeSpringsForceField', points='@ROI1.indices', stiffness=1e12)
    cable = PullingCable(sphere,
                        "PullingCable",
                        pullPointLocation=[30.0, -15, 0],
                        cableGeometry = [[20, -10, 0],
                         [10, -5, 0],
                         [0, 0, 0],
                         [-20, 10, 0]])

    sphere.addObject(ballController(cable))


    return rootNode
